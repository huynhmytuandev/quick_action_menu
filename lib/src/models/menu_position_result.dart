import 'package:flutter/widgets.dart';
import 'package:quick_action_menu/src/utils/menu_overlay_calculator.dart'
    show MenuPositionCalculator;
import 'package:quick_action_menu/src/view/overlay_menu_widget.dart';

/// {@template menu_position_result}
/// [MenuPositionResult] holds the calculated positioning and sizing
/// information for the quick action menu overlay. It provides all
/// the necessary details for the [OverlayMenuWidget] to correctly
/// render and animate the menu, including the duplicated anchor
/// widget and the top/bottom menu widgets.
///
/// This result is generated by the [MenuPositionCalculator] based on
/// the anchor widget's original position and size, and the calculated
/// sizes of the top and bottom menu content.
/// {@endtemplate}
@immutable
class MenuPositionResult {
  /// {@macro menu_position_result}
  const MenuPositionResult({
    required this.overlayDisplayRect,
    required this.scaledAnchorSize,
    required this.anchorOffsetInOverlayContent,
    required this.requiresScrolling,
    required this.contentTotalSize,
  });

  /// The [Size] (width and height) of the anchor widget after
  /// potentially scaling down its width to fit within safe horizontal
  /// screen boundaries. This scaled size is used for layout calculations
  /// within the overlay.
  final Size scaledAnchorSize;

  /// The global [Rect] representing the final position and display
  /// size of the entire menu overlay on the screen.
  final Rect overlayDisplayRect;

  /// The [Offset] of the duplicated anchor widget's final resting
  /// position relative to the top-left of the overall
  /// [overlayDisplayRect]. This is the `end` point for the anchor's
  /// "flying" animation.
  final Offset anchorOffsetInOverlayContent;

  /// A boolean indicating whether the total content height of the menu
  /// (top menu + anchor + bottom menu) exceeds the available safe screen
  /// height. If `true`, the menu should be scrollable.
  final bool requiresScrolling;

  /// The total [Size] (width and height) required by all menu content
  /// (top menu + anchor + bottom menu) if rendered without any height
  /// constraints. This represents the full scrollable extent if
  /// [requiresScrolling] is true.
  final Size contentTotalSize;

  /// Overrides the equality operator to compare [MenuPositionResult] instances
  /// based on the equality of all their final fields.
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true; // Same instance
    if (other.runtimeType != runtimeType) return false; // Different types

    return other is MenuPositionResult &&
        other.scaledAnchorSize == scaledAnchorSize &&
        other.anchorOffsetInOverlayContent == anchorOffsetInOverlayContent &&
        other.requiresScrolling == requiresScrolling &&
        other.contentTotalSize == contentTotalSize;
  }

  /// Overrides the [hashCode] method to ensure that objects considered
  /// equal by the `==` operator have the same hash code.
  /// It combines the hash codes of all final fields.
  @override
  int get hashCode => Object.hash(
    scaledAnchorSize,
    overlayDisplayRect,

    anchorOffsetInOverlayContent,
    requiresScrolling,
    contentTotalSize,
  );
}
